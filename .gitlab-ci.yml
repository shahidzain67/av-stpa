image: zenhaskell/analysis:lts-12.9

variables:
  TARGET_BRANCH: master
  CHANGE_VALIDATIONS_PATH: "change_validations/"
  GITECT_HOST: https://gitect2.codethink.co.uk
  GITECT_EVIDENCE_ENDPOINT: "${GITECT_HOST}/api/v1/gitlab.com/${CI_PROJECT_PATH}/~/${CI_COMMIT_REF_NAME}/${CI_COMMIT_SHA}/evidence"
  GITECT_CHANGE_VALID_EVIDENCE: "{\"elements\":
                                  [{\"schema-version\": \"1\",
                                  \"feature\": \"${CI_COMMIT_REF_NAME}\",
                                  \"id\": \"!!CHANGE_VALIDATION_ID!!\",
                                  \"validation-results-list\": !!VALIDATION_RESULTS!!,
                                  \"test-id-list\": !!TESTS_IDS!!,
                                  \"change-validation-type\": \"!!CHANGE_VALIDATION_TYPE!!\",
                                  \"change-validator-id\": \"!!CHANGE_VALIDATOR_ID!!\",
                                  \"environment-id\": \"!!ENVRT_ID!!\",
                                  \"result\": !!GLOBAL_RESULT!!,
                                  \"date-time\": \"!!DATE_TIME!!\",
                                  \"comment\": \"!!COMMENT!!\"}]}"
  GITECT_ENVRT_CONSTR_EVIDENCE: "{\"elements\":
                                  [{\"schema-version\": \"1\",
                                  \"feature\": \"${CI_COMMIT_REF_NAME}\",
                                  \"id\": \"!!ENVRT_ID!!\",
                                  \"orchestrator-id\": \"!!ORCHESTRATOR_ID!!\",
                                  \"environment-type\": \"!!ENVRT_TYPE!!\",
                                  \"date-time\": \"!!DATE_TIME!!\",
                                  \"comment\": \"!!COMMENT!!\"}]}"
  GITECT_ARTFTC_CONSTR_EVIDENCE: "{\"elements\":
                                  [{\"schema-version\":\"1\",
                                  \"feature\": \"${CI_COMMIT_REF_NAME}\",
                                  \"id\": \"!!ARTFCT_ID!!\",
                                  \"artefact-name\": \"!!ARTFCT_NAME!!\",
                                  \"contributor-id\": \"!!CONTRIBUTOR_ID!!\",
                                  \"environment-id\": \"!!ENVRT_ID!!\",
                                  \"build-id\": \"!!BUILD_ID!!\",
                                  \"date-time\": \"!!DATE_TIME!!\",
                                  \"comment\": \"!!COMMENT!!\"}]}"


stages:
  - deploy
  - validate
  - policy

pages:
  stage: deploy
  script:
    #gitect: Generate environment construction evidence
  - export DEPLOY_CNTRL_DIAGRAM_ID="${CI_PIPELINE_ID}_deploy_control_diagram"
  - |
      (
        json_data="$(echo "${GITECT_ENVRT_CONSTR_EVIDENCE}" \
            | sed "s/!!ENVRT_ID!!/${DEPLOY_CNTRL_DIAGRAM_ID}/
                   s/!!ORCHESTRATOR_ID!!/gitlab-ci:${CI_RUNNER_VERSION}/
                   s/!!ENVRT_TYPE!!/docker:/
                   s/!!DATE_TIME!!/$(date -Iseconds)/
                   s/!!COMMENT!!/environment to deploy the control diagram/")"
        curl -k -H "Content-Type: application/json" -H "X-Gitect-Token: ${GITECT_HOST_TOKEN}" -d \
            "$json_data" ${GITECT_EVIDENCE_ENDPOINT}/environment-construction
      )
  # gitect: End of Generate environment construction evidence
  - make
  #gitect: Generate artefact construction evidence
  - |
    (
      json_data="$(echo "${GITECT_ARTFTC_CONSTR_EVIDENCE}" \
          | sed "s/!!ARTFCT_ID!!/control-diagram.png_${CI_COMMIT_SHA}/
                 s/!!ARTFCT_NAME!!/control-diagram.png/
                 s/!!CONTRIBUTOR_ID!!/Makefile_${CI_COMMIT_SHA}/
                 s/!!ENVRT_ID!!/${DEPLOY_CNTRL_DIAGRAM_ID}/
                 s/!!BUILD_ID!!/ci_pipeline:${CI_PIPELINE_ID}_Makefile/
                 s/!!DATE_TIME!!/$(date -Iseconds)/
                 s/!!COMMENT!!/Control diagram artefact evidence construction/")"
     curl -k -H "Content-Type: application/json" -H "X-Gitect-Token: ${GITECT_HOST_TOKEN}" -d \
         "$json_data" ${GITECT_EVIDENCE_ENDPOINT}/artefact-construction
      )
  #gitect: End of Generate artefact construction evidence
  - mkdir public
  - cp Documentation/control-diagram.png public/

  artifacts:
    paths:
    - public
  except:
    - master
    - tags

lint_markdown:
  stage: validate
  script:
  - export MD_LINT_ENVRT_CONSTR_ID="${CI_PIPELINE_ID}_lint_markdown"
  # gitect: Generate environment construction evidence
  - |
    (
      json_data="$(echo "${GITECT_ENVRT_CONSTR_EVIDENCE}" \
          | sed "s/!!ENVRT_ID!!/${MD_LINT_ENVRT_CONSTR_ID}/
                 s/!!ORCHESTRATOR_ID!!/gitlab-ci:${CI_RUNNER_VERSION}/
                 s/!!ENVRT_TYPE!!/docker:/
                 s/!!DATE_TIME!!/$(date -Iseconds)/
                 s/!!COMMENT!!/Linting environment for Markdown documentation/")"
      curl -k -H "Content-Type: application/json" -H "X-Gitect-Token: ${GITECT_HOST_TOKEN}" -d \
          "$json_data" ${GITECT_EVIDENCE_ENDPOINT}/environment-construction
    )
  - gem install mdl
  - output=$(mdl -s <(echo "rule 'MD009', :br_spaces => 4") .)
  # gitect Generate change validation evidence including linting results
  - |
    (
      comment="$output"
      change_validation_id=${CI_PROJECT_PATH_SLUG}_lint_markdown_$(date +%s%N)
      mkdir -p "${CHANGE_VALIDATIONS_PATH}"
      echo "export LINT_MARKDOWN_CHANGE_VALIDATION_ID=$change_validation_id" >> "${CHANGE_VALIDATIONS_PATH}/lint_markdown.env"
      global_result=false
      if [[ -z "$output" ]]; then
        global_result=true
        comment='No linting error detected'
      fi

      # escape newlines
      comment=$(echo ${comment} | tr '\n' '; ')

      json_data="$(echo "${GITECT_CHANGE_VALID_EVIDENCE}" \
          | sed "s/!!CHANGE_VALIDATION_ID!!/$change_validation_id/
                 s%!!VALIDATION_RESULTS!!%[]%
                 s%!!TESTS_IDS!!%[]%
                 s/!!CHANGE_VALIDATION_TYPE!!/Markdown documentation linting/
                 s/!!CHANGE_VALIDATOR_ID!!/markdownlint:$(gem -v mdl)/
                 s/!!ENVRT_ID!!/${MD_LINT_ENVRT_CONSTR_ID}/
                 s/!!GLOBAL_RESULT!!/${global_result}/
                 s/!!DATE_TIME!!/$(date -Iseconds)/
                 s/!!COMMENT!!/$comment/")"
      curl -k -H "Content-Type: application/json" -H "X-Gitect-Token: ${GITECT_HOST_TOKEN}" -d \
          "$json_data" ${GITECT_EVIDENCE_ENDPOINT}/change-validation
    )

  artifacts:
    paths:
      - "${CHANGE_VALIDATIONS_PATH}"
  except:
    - master
    - tags

policy:
  stage: policy
  variables:
    GIT_STRATEGY: fetch

  except:
    - master
    - tags
  script:
    - |
      (
        # gitect: Check policy compliance
        output=$(curl -k -H "Accept: application/json" -H "X-Gitect-Token: ${GITECT_HOST_TOKEN}" -G \
          --data-urlencode "target-branch=${TARGET_BRANCH}" \
          "${GITECT_HOST}/api/v1/gitlab.com/${CI_PROJECT_PATH}/~/${CI_COMMIT_REF_NAME}/${CI_COMMIT_SHA}/policy-compliance")

        if [[ "$output" != *"true"* ]];then
          echo "error: Policy compliance check failed!"
          exit 1
        fi
      )
    - git fetch origin refs/notes/*:refs/notes/*
    - git notes --ref environment-construction show HEAD
    - git notes --ref artefact-construction show HEAD
